  modeling:
    NET_NAME: 'GRU-16H1-16H2'
    RNN_PATH: './save_tf/'
    PREDICTION_FEATURES_NAMES: ['pos.x', 'pos.y' , 'vel.x', 'vel.y', 'speed', 'accel.x', 'accel.y', 'steering_angle', 'body_angle', 'yaw_rate', 'drift_angle']

  paths:
    # PATH HAS TO END WITH A SOLIDUS ("/") CHARACTER
    path_to_experiment: 'Experiment-1/'
    PATH_TO_EXPERIMENT_RECORDINGS: './SI_Toolkit_ApplicationSpecificFiles/Experiments/'  # Path where the experiments data is stored

  training_default:
    # For training closed loop dynamics model:
    control_inputs: ['cmd.throttle', 'cmd.brake', 'cmd.reverse']
    state_inputs: ['pos.x', 'pos.y' , 'vel.x', 'vel.y', 'speed', 'accel.x', 'accel.y', 'steering_angle', 'body_angle', 'yaw_rate', 'drift_angle']
    outputs: ['pos.x', 'pos.y' , 'vel.x', 'vel.y', 'speed', 'accel.x', 'accel.y', 'steering_angle', 'body_angle', 'yaw_rate', 'drift_angle']
    # Cartpole examples: For training open loop dynamics model:
    # inputs = ['position', 'positionD', 'angle_sin', 'angle_cos', 'angleD']
    # outputs = inputs_list
    # For training of RNN imitating MPC:
    # inputs = ['position', 'positionD', 'angle', 'angleD', 'target_position']
    # outputs = ['Q']

  testing:
    tests: [ 'Euler' ]  # May be 'Euler', Euler-predictor, name of network or None = 'Dense-16H1-16H2'
    TEST_FILE: 'Experiment-1.csv'
